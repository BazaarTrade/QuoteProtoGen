// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/quote.proto

package pbQ

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Quote_StreamPrecisedTrade_FullMethodName             = "/pbQ.Quote/StreamPrecisedTrade"
	Quote_StreamPrecisedOrderBookSnapshot_FullMethodName = "/pbQ.Quote/StreamPrecisedOrderBookSnapshot"
	Quote_StreamTicker_FullMethodName                    = "/pbQ.Quote/StreamTicker"
	Quote_StreamCandleStick_FullMethodName               = "/pbQ.Quote/StreamCandleStick"
	Quote_CreateOrderBook_FullMethodName                 = "/pbQ.Quote/CreateOrderBook"
	Quote_DeleteOrderBook_FullMethodName                 = "/pbQ.Quote/DeleteOrderBook"
)

// QuoteClient is the client API for Quote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteClient interface {
	StreamPrecisedTrade(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Trade], error)
	StreamPrecisedOrderBookSnapshot(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrecisedOrderBookSnapshots], error)
	StreamTicker(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Ticker], error)
	StreamCandleStick(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CandleStick], error)
	CreateOrderBook(ctx context.Context, in *PairParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteOrderBook(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type quoteClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteClient(cc grpc.ClientConnInterface) QuoteClient {
	return &quoteClient{cc}
}

func (c *quoteClient) StreamPrecisedTrade(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Trade], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Quote_ServiceDesc.Streams[0], Quote_StreamPrecisedTrade_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pair, Trade]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamPrecisedTradeClient = grpc.ServerStreamingClient[Trade]

func (c *quoteClient) StreamPrecisedOrderBookSnapshot(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrecisedOrderBookSnapshots], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Quote_ServiceDesc.Streams[1], Quote_StreamPrecisedOrderBookSnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pair, PrecisedOrderBookSnapshots]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamPrecisedOrderBookSnapshotClient = grpc.ServerStreamingClient[PrecisedOrderBookSnapshots]

func (c *quoteClient) StreamTicker(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Ticker], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Quote_ServiceDesc.Streams[2], Quote_StreamTicker_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pair, Ticker]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamTickerClient = grpc.ServerStreamingClient[Ticker]

func (c *quoteClient) StreamCandleStick(ctx context.Context, in *Pair, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CandleStick], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Quote_ServiceDesc.Streams[3], Quote_StreamCandleStick_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pair, CandleStick]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamCandleStickClient = grpc.ServerStreamingClient[CandleStick]

func (c *quoteClient) CreateOrderBook(ctx context.Context, in *PairParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Quote_CreateOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteClient) DeleteOrderBook(ctx context.Context, in *Pair, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Quote_DeleteOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServer is the server API for Quote service.
// All implementations must embed UnimplementedQuoteServer
// for forward compatibility.
type QuoteServer interface {
	StreamPrecisedTrade(*Pair, grpc.ServerStreamingServer[Trade]) error
	StreamPrecisedOrderBookSnapshot(*Pair, grpc.ServerStreamingServer[PrecisedOrderBookSnapshots]) error
	StreamTicker(*Pair, grpc.ServerStreamingServer[Ticker]) error
	StreamCandleStick(*Pair, grpc.ServerStreamingServer[CandleStick]) error
	CreateOrderBook(context.Context, *PairParams) (*emptypb.Empty, error)
	DeleteOrderBook(context.Context, *Pair) (*emptypb.Empty, error)
	mustEmbedUnimplementedQuoteServer()
}

// UnimplementedQuoteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuoteServer struct{}

func (UnimplementedQuoteServer) StreamPrecisedTrade(*Pair, grpc.ServerStreamingServer[Trade]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPrecisedTrade not implemented")
}
func (UnimplementedQuoteServer) StreamPrecisedOrderBookSnapshot(*Pair, grpc.ServerStreamingServer[PrecisedOrderBookSnapshots]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPrecisedOrderBookSnapshot not implemented")
}
func (UnimplementedQuoteServer) StreamTicker(*Pair, grpc.ServerStreamingServer[Ticker]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTicker not implemented")
}
func (UnimplementedQuoteServer) StreamCandleStick(*Pair, grpc.ServerStreamingServer[CandleStick]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCandleStick not implemented")
}
func (UnimplementedQuoteServer) CreateOrderBook(context.Context, *PairParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderBook not implemented")
}
func (UnimplementedQuoteServer) DeleteOrderBook(context.Context, *Pair) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderBook not implemented")
}
func (UnimplementedQuoteServer) mustEmbedUnimplementedQuoteServer() {}
func (UnimplementedQuoteServer) testEmbeddedByValue()               {}

// UnsafeQuoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServer will
// result in compilation errors.
type UnsafeQuoteServer interface {
	mustEmbedUnimplementedQuoteServer()
}

func RegisterQuoteServer(s grpc.ServiceRegistrar, srv QuoteServer) {
	// If the following call pancis, it indicates UnimplementedQuoteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Quote_ServiceDesc, srv)
}

func _Quote_StreamPrecisedTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pair)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServer).StreamPrecisedTrade(m, &grpc.GenericServerStream[Pair, Trade]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamPrecisedTradeServer = grpc.ServerStreamingServer[Trade]

func _Quote_StreamPrecisedOrderBookSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pair)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServer).StreamPrecisedOrderBookSnapshot(m, &grpc.GenericServerStream[Pair, PrecisedOrderBookSnapshots]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamPrecisedOrderBookSnapshotServer = grpc.ServerStreamingServer[PrecisedOrderBookSnapshots]

func _Quote_StreamTicker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pair)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServer).StreamTicker(m, &grpc.GenericServerStream[Pair, Ticker]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamTickerServer = grpc.ServerStreamingServer[Ticker]

func _Quote_StreamCandleStick_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pair)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServer).StreamCandleStick(m, &grpc.GenericServerStream[Pair, CandleStick]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quote_StreamCandleStickServer = grpc.ServerStreamingServer[CandleStick]

func _Quote_CreateOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).CreateOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quote_CreateOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).CreateOrderBook(ctx, req.(*PairParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quote_DeleteOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).DeleteOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quote_DeleteOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).DeleteOrderBook(ctx, req.(*Pair))
	}
	return interceptor(ctx, in, info, handler)
}

// Quote_ServiceDesc is the grpc.ServiceDesc for Quote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbQ.Quote",
	HandlerType: (*QuoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderBook",
			Handler:    _Quote_CreateOrderBook_Handler,
		},
		{
			MethodName: "DeleteOrderBook",
			Handler:    _Quote_DeleteOrderBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPrecisedTrade",
			Handler:       _Quote_StreamPrecisedTrade_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPrecisedOrderBookSnapshot",
			Handler:       _Quote_StreamPrecisedOrderBookSnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTicker",
			Handler:       _Quote_StreamTicker_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCandleStick",
			Handler:       _Quote_StreamCandleStick_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/quote.proto",
}
